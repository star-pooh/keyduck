name: Deploy

on:
  workflow_dispatch:
  pull_request:
    types:
      - closed
    branches:
      - test/git-action-ci-cd

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Gradle 캐싱
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: Linux-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            Linux-gradle-

      - name: Make .env file from GitHub Secrets
        run: |
          echo "${{ secrets.ENV_SECRET }}" > .env
          echo "SPRING_PROFILES_ACTIVE=dev" >> .env  # 배포 시 RDS를 사용하도록 환경 설정 추가
        shell: bash

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Run tests with H2
        run: ./gradlew test -Dspring.profiles.active=test

      # 이미지 빌드를 EC2에서 하도록 수정
      - name: Copy files to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ubuntu
          key: ${{ secrets.SSH_KEY }}
          source: |
            .env
            ./build/libs/*.jar
          target: "~"

      - name: Deploy to EC2 and Build Docker Image
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ubuntu
          key: ${{ secrets.SSH_KEY }}
          script: |
            # EC2에서 Docker 빌드 실행
            cd ~
            ./gradlew bootJar
            docker build --build-arg PROFILE=dev -t myapp:latest .

            # 컨테이너 실행
            docker stop myapp-container || true
            docker rm myapp-container || true
            docker run -d --name myapp-container --env-file .env -p 8080:8080 myapp:latest
            docker image prune -f
