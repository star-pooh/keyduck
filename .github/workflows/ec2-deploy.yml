name: Deploy

on:
  workflow_dispatch:
  pull_request:
    types:
      - closed
    branches:
      - test/git-action-ci-cd

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Gradle 캐싱
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: Linux-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            Linux-gradle-

      - name: Make .env file from GitHub Secrets
        run: |
          echo "${{ secrets.ENV_SECRET }}" > .env
          echo "SPRING_PROFILES_ACTIVE=dev" >> .env  # 배포 시 RDS를 사용하도록 환경 설정 추가
        shell: bash

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Run tests with H2
        run: ./gradlew test -Dspring.profiles.active=test

      - name: Build JAR file with H2
        run: ./gradlew bootJar -Dspring.profiles.active=test

      - name: Copy files to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ubuntu
          key: ${{ secrets.SSH_KEY }}
          port: 22
          source: ".env, ./gradlew, ./gradle/wrapper/*, ./build.gradle, ./settings.gradle, ./src, Dockerfile"
          #          ".env, ./gradlew, ./gradle/wrapper/*, ./build.gradle, ./settings.gradle, ./src, Dockerfile, ./build/libs/*.jar"
          target: "~/myapp"

      - name: Verify files on EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ubuntu
          key: ${{ secrets.SSH_KEY }}
          script: |
            echo "Listing files in EC2 target directory:"
            ls -al ~/myapp
            echo "Checking Dockerfile content:"
            cat ~/myapp/Dockerfile
            echo "Checking .env content:"
            cat ~/myapp/.env

      - name: Deploy to EC2 and Build Docker Image
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ubuntu
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd ~/myapp
            echo "Building JAR file on EC2..."
            chmod +x ./gradlew
            ./gradlew clean bootJar
            echo "Building Docker image..."
            docker build --build-arg PROFILE=dev -t myapp:latest .
            echo "Stopping existing container (if any)..."
            docker stop myapp-container || true
            docker rm myapp-container || true
            echo "Running Docker container..."
            docker run -d --name myapp-container --env-file .env -p 8080:8080 myapp:latest
            echo "Cleaning up unused Docker images..."
            docker image prune -f
