spring:
  application:
    name: "keyduck"

  config:
    import: optional:file:.env[.properties]

  datasource:
    url: jdbc:mysql://${MYSQL_HOST}:${MYSQL_PORT}/${MYSQL_DATABASE}
    username: ${MYSQL_USERNAME}
    password: ${MYSQL_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver

  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        format_sql: true # SQL 포맷팅 활성화
        show-sql: true
    defer-datasource-initialization: true # 데이터 소스 초기화 지연
    database-platform: org.hibernate.dialect.MySQLDialect

  rabbitmq:
    host: ${RABBITMQ_HOST}
    port: ${RABBITMQ_PORT}
    username: ${RABBITMQ_USERNAME}
    password: ${RABBITMQ_PASSWORD}

  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
      repositories:
        enabled: false

jwt:
  secret:
    key: ${JWT_SECRET_KEY}

payment:
  toss:
    test-client-api-key: ${PAYMENT_CLIENT_API_KEY}
    test-secret-api-key: ${PAYMENT_SECRET_API_KEY}
    payment-confirm-url: ${PAYMENT_CONFIRM_URL}
    payment-cancel-url: ${PAYMENT_CANCEL_URL}

rabbitmq:
  queue:
    name: ${RABBITMQ_QUEUE_NAME}
    dead-letter-exchange: ${RABBITMQ_DEAD_LETTER_EXCHANGE_NAME}
    dead-letter-routing-key: ${RABBITMQ_DEAD_LETTER_ROUTING_KEY}
  exchange:
    name: ${RABBITMQ_EXCHANGE_NAME}
  routing:
    key: ${RABBITMQ_ROUTING_KEY}
  dlq:
    name: ${RABBITMQ_DEAD_LETTER_QUEUE_NAME}
